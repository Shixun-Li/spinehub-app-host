/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1": {
    get: operations["AppGetHello"];
  };
  "/api/v1/health-check": {
    get: operations["HealthCheckCheck"];
  };
  "/api/v1/auth/sign-in": {
    post: operations["AuthSignIn"];
  };
  "/api/v1/auth/refresh": {
    post: operations["AuthRefreshToken"];
  };
  "/api/v1/auth/me": {
    get: operations["AuthMe"];
  };
  "/api/v1/auth/reset-password/start": {
    put: operations["AuthResetPasswordStart"];
  };
  "/api/v1/auth/reset-password/check": {
    put: operations["AuthResetPasswordCheck"];
  };
  "/api/v1/auth/reset-password/finish": {
    put: operations["AuthResetPasswordFinish"];
  };
  "/api/v1/admin/user/{userId}/admin/send-invite": {
    put: operations["UserAdminSendInvite"];
  };
  "/api/v1/user/{userId}/profile/staff": {
    patch: operations["UserUpdateStaff"];
  };
  "/api/v1/user/{userId}/profile/patient": {
    patch: operations["UserUpdatePatient"];
  };
  "/api/v1/user/{userId}/update-email/start": {
    put: operations["UserUpdateEmailStart"];
  };
  "/api/v1/user/{userId}/update-email/finish": {
    put: operations["UserUpdateEmailFinish"];
  };
  "/api/v1/user/{userId}/update-password": {
    put: operations["UserUpdatePassword"];
  };
  "/api/v1/user-invitation": {
    get: operations["UserInvitationGetUser"];
  };
  "/api/v1/user-invitation/user/{userId}/signup": {
    put: operations["UserInvitationInvitationSignUp"];
  };
  "/api/v1/files/upload/{rootFolder}": {
    get: operations["FileUploadImage"];
  };
  "/api/v1/files/download/resize": {
    get: operations["FileDownloadResize"];
  };
  "/api/v1/files/download": {
    get: operations["FileDownload"];
  };
  "/api/v1/patient": {
    get: operations["PatientList"];
    post: operations["PatientCreate"];
  };
  "/api/v1/patient/{patientId}": {
    get: operations["PatientGetById"];
    delete: operations["PatientDelete"];
    patch: operations["PatientUpdate"];
  };
  "/api/v1/patient/{patientId}/activate": {
    put: operations["PatientActivate"];
  };
  "/api/v1/patient/{patientId}/deactivate": {
    put: operations["PatientDeactivate"];
  };
  "/api/v1/patient/{patientId}/document": {
    get: operations["PatientGetDocuments"];
    post: operations["PatientUploadDocument"];
  };
  "/api/v1/patient/{patientId}/document/{documentId}": {
    get: operations["PatientGetDocumentById"];
    delete: operations["PatientDeleteDocument"];
  };
  "/api/v1/staff": {
    get: operations["StaffList"];
    post: operations["StaffCreate"];
  };
  "/api/v1/staff/{staffId}": {
    get: operations["StaffFindOne"];
    delete: operations["StaffDelete"];
    patch: operations["StaffUpdate"];
  };
  "/api/v1/staff/{staffId}/activate": {
    put: operations["StaffActivate"];
  };
  "/api/v1/staff/{staffId}/deactivate": {
    put: operations["StaffDeactivate"];
  };
  "/api/v1/booking": {
    get: operations["BookingList"];
    post: operations["BookingCreate"];
  };
  "/api/v1/booking/{bookingId}": {
    get: operations["BookingGetById"];
    delete: operations["BookingDelete"];
    patch: operations["BookingUpdate"];
  };
  "/api/v1/booking/{bookingId}/status": {
    put: operations["BookingUpdateStatus"];
  };
  "/api/v1/calendar/bookings": {
    get: operations["CalendarGetBookings"];
  };
  "/api/v1/template": {
    get: operations["TemplateList"];
    post: operations["TemplateCreate"];
  };
  "/api/v1/template/{templateId}": {
    delete: operations["TemplateDelete"];
    patch: operations["TemplateUpdate"];
  };
  "/api/v1/template/{templateId}/surgery": {
    get: operations["SurgeryList"];
    post: operations["SurgeryCreate"];
  };
  "/api/v1/template/{templateId}/surgery/{surgeryId}": {
    get: operations["SurgeryFindOne"];
    delete: operations["SurgeryDelete"];
    patch: operations["SurgeryUpdate"];
  };
  "/api/v1/template/{templateId}/surgery/{surgeryId}/details": {
    get: operations["SurgeryDetailGet"];
    put: operations["SurgeryDetailUpsert"];
  };
  "/api/v1/template/{templateId}/surgery/{surgeryId}/equipments": {
    get: operations["SurgeryItemGetEquipments"];
    put: operations["SurgeryItemUpdateEquipments"];
  };
  "/api/v1/template/{templateId}/surgery/{surgeryId}/implants": {
    get: operations["SurgeryItemGetImplants"];
    put: operations["SurgeryItemUpdateImplants"];
  };
  "/api/v1/template/{templateId}/surgery/{surgeryId}/mbs-items": {
    get: operations["SurgeryItemGetMbs"];
    put: operations["SurgeryItemUpdateMbs"];
  };
  "/api/v1/template/{templateId}/surgery/{surgeryId}/team": {
    get: operations["SurgeryTeamGet"];
    put: operations["SurgeryTeamCreate"];
  };
  "/api/v1/settings/category": {
    get: operations["CategoryList"];
    post: operations["CategoryCreate"];
  };
  "/api/v1/settings/category/{categoryId}": {
    delete: operations["CategoryDelete"];
    patch: operations["CategoryUpdate"];
  };
  "/api/v1/settings/staff-roles": {
    get: operations["SettingsGetStaffRoles"];
  };
  "/api/v1/settings/flags": {
    get: operations["SettingsGetFlags"];
  };
  "/api/v1/settings/implants": {
    get: operations["SettingsGetImplants"];
  };
  "/api/v1/settings/equipments": {
    get: operations["SettingsGetEquipments"];
  };
  "/api/v1/settings/staff-role": {
    post: operations["StaffRoleCreate"];
  };
  "/api/v1/settings/staff-role/{staffRoleId}": {
    delete: operations["StaffRoleDelete"];
    patch: operations["StaffRoleUpdate"];
  };
  "/api/v1/settings/flag": {
    post: operations["FlagCreate"];
  };
  "/api/v1/settings/flag/{flagId}": {
    delete: operations["FlagDelete"];
    patch: operations["FlagUpdate"];
  };
  "/api/v1/settings/category/{categoryId}/implant": {
    get: operations["ImplantList"];
    post: operations["ImplantCreate"];
  };
  "/api/v1/settings/category/{categoryId}/implant/{implantId}": {
    delete: operations["ImplantDelete"];
    patch: operations["ImplantUpdate"];
  };
  "/api/v1/settings/category/{categoryId}/equipment": {
    get: operations["EquipmentList"];
    post: operations["EquipmentCreate"];
  };
  "/api/v1/settings/category/{categoryId}/equipment/{equipmentId}": {
    delete: operations["EquipmentDelete"];
    patch: operations["EquipmentUpdate"];
  };
  "/api/v1/calendar/event": {
    get: operations["EventList"];
    post: operations["EventCreate"];
  };
  "/api/v1/calendar/event/{eventId}": {
    get: operations["EventGetById"];
    put: operations["EventUpdate"];
    delete: operations["EventDelete"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AuthSignInRequestDto: {
      email: string;
      password: string;
    };
    AuthTokenDto: {
      accessToken: string;
      expiresIn: number;
      refreshExpiresIn: number;
      refreshToken: string;
      tokenType: string;
      notBeforePolicy: number;
      sessionState: number;
      scope: string;
    };
    StaffBaseDto: {
      companyName?: string | null;
      companyPosition?: string | null;
      /** Format: uuid */
      userId: string;
      roleId: string;
    };
    PatientBaseDto: {
      /** @enum {string} */
      gender: "Male" | "Female";
      addressId?: string | null;
      age?: number | null;
      emergencyName?: string | null;
      emergencyPhone?: string | null;
      relationship?: string | null;
      /** Format: uuid */
      userId: string;
      /** Format: date-time */
      dob: string;
    };
    UserPayloadDto: {
      email?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      phoneNumber?: string | null;
      /** @enum {string} */
      accessLevel: "Godmin" | "GodminStaff" | "Patient" | "Staff" | "Clinical" | "Commercial" | "Financial" | "Associate";
      avatar?: string | null;
      /** @enum {string} */
      status: "PendingInvite" | "EmailSent" | "Completed";
      /** Format: date-time */
      deletedAt?: string | null;
      /** @description <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">Timezone ID</a> */
      timezone: string;
      staff: components["schemas"]["StaffBaseDto"] | null;
      patient: components["schemas"]["PatientBaseDto"] | null;
      /** Format: uuid */
      id: string;
      isActive: boolean;
      /** Format: date-time */
      createdAt: string;
    };
    AuthSignInResultDto: {
      token: components["schemas"]["AuthTokenDto"];
      user: components["schemas"]["UserPayloadDto"];
    };
    AuthVerificationStartDto: {
      email: string;
    };
    AuthVerificationCodeFinishDto: {
      email: string;
      code: string;
    };
    AuthResetPasswordFinishDto: {
      email: string;
      code: string;
      password: string;
    };
    UserUpdateStaffProfile: {
      firstName?: string | null;
      lastName?: string | null;
      phoneNumber?: string | null;
      avatar?: string | null;
      /** @description <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">Timezone ID</a> */
      timezone?: string;
    };
    AddressCreateDto: {
      street: string;
      suburb: string;
      state: string;
      postcode: string;
      country: string;
    };
    PatientThirdPartyCreateDto: {
      payerName: string;
      contact: string;
      email: string;
      claimNumber: string;
    };
    PatientBillingMedicareCreateDto: {
      policyNumber: string;
      reference: string;
      /** Format: date-time */
      expiryDate: string;
    };
    PatientBillingPrivateInsuranceCreateDto: {
      payerName: string;
      policyNumber: string;
    };
    PatientBillingCreateDto: {
      medicare: components["schemas"]["PatientBillingMedicareCreateDto"];
      privateInsurance: components["schemas"]["PatientBillingPrivateInsuranceCreateDto"];
      referringGP: string;
      providerNumber: string;
    };
    PatientUpdateDto: {
      /** @enum {string} */
      gender?: "Male" | "Female";
      age?: number | null;
      emergencyName?: string | null;
      emergencyPhone?: string | null;
      relationship?: string | null;
      address?: components["schemas"]["AddressCreateDto"];
      thirdParty?: components["schemas"]["PatientThirdPartyCreateDto"];
      billing?: components["schemas"]["PatientBillingCreateDto"];
      /** Format: date-time */
      dob?: string;
    };
    UserUpdatePatientProfile: {
      firstName?: string | null;
      lastName?: string | null;
      phoneNumber?: string | null;
      avatar?: string | null;
      /** @description <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">Timezone ID</a> */
      timezone?: string;
      patient?: components["schemas"]["PatientUpdateDto"];
    };
    UserUpdateEmailStartDto: {
      newEmail: string;
      currentPassword: string;
    };
    UserUpdateEmailFinishDto: {
      code: string;
      newEmail: string;
    };
    UserPasswordUpdateDto: {
      newPassword: string;
      currentPassword: string;
    };
    UserPasswordCreateDto: {
      password: string;
    };
    FileUploadResponseDto: {
      /** @description File name */
      fileName: string;
      /** @description Url to upload or download file */
      url: string;
    };
    FileDownloadResponseDto: {
      url: string;
    };
    PatientCreateDto: {
      /** @enum {string} */
      gender: "Male" | "Female";
      age?: number | null;
      emergencyName?: string | null;
      emergencyPhone?: string | null;
      relationship?: string | null;
      address?: components["schemas"]["AddressCreateDto"];
      billing?: components["schemas"]["PatientBillingCreateDto"];
      thirdParty?: components["schemas"]["PatientThirdPartyCreateDto"];
      /** Format: date-time */
      dob: string;
    };
    UserPatientCreateDto: {
      avatar?: string | null;
      email: string;
      firstName: string;
      lastName: string;
      phoneNumber: string;
      patient: components["schemas"]["PatientCreateDto"];
    };
    AddressBaseDto: {
      id: string;
      street: string;
      suburb: string;
      state: string;
      postcode: string;
      country: string;
    };
    PatientBillingMedicareBaseDto: {
      billingId: string;
      policyNumber: string;
      reference: string;
      /** Format: date-time */
      expiryDate: string;
    };
    PatientBillingPrivateInsuranceBaseDto: {
      billingId: string;
      payerName: string;
      policyNumber: string;
    };
    PatientBillingPayloadDto: {
      medicare: components["schemas"]["PatientBillingMedicareBaseDto"] | null;
      privateInsurance: components["schemas"]["PatientBillingPrivateInsuranceBaseDto"] | null;
      id: string;
      /** Format: uuid */
      patientId: string;
      referringGP: string;
      providerNumber: string;
    };
    PatientThirdPartyBaseDto: {
      id: string;
      /** Format: uuid */
      patientId: string;
      payerName: string;
      contact: string;
      email: string;
      claimNumber: string;
    };
    BookingBaseDto: {
      position?: string | null;
      table?: string | null;
      notes?: string | null;
      fastingDetails?: string | null;
      /** Format: date-time */
      startDate?: string | null;
      /** Format: date-time */
      endDate?: string | null;
      /** Format: date-time */
      admissionTime?: string | null;
      /** @enum {string} */
      status: "Contemplating" | "Tentative" | "Confirmed" | "Finalised" | "Cancelled" | "InOR" | "Closing" | "Discharge";
      /** Format: uuid */
      surgeonId?: string | null;
      templateId?: string | null;
      id: string;
      surgeryTitle: string;
      surgeryCode: string;
      surgeryName: string;
      /** Format: uuid */
      patientId: string;
      /** Format: date-time */
      createdAt: string;
    };
    PatientDocumentBaseDto: {
      /** @enum {string} */
      type: "Document" | "Photo" | "Link";
      id: string;
      title: string;
      file: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: uuid */
      patientId: string;
    };
    PatientPayloadDto: {
      /** @enum {string} */
      gender: "Male" | "Female";
      addressId?: string | null;
      age?: number | null;
      emergencyName?: string | null;
      emergencyPhone?: string | null;
      relationship?: string | null;
      /** Format: uuid */
      userId: string;
      /** Format: date-time */
      dob: string;
      address: components["schemas"]["AddressBaseDto"] | null;
      billing: components["schemas"]["PatientBillingPayloadDto"] | null;
      thirdParty: components["schemas"]["PatientThirdPartyBaseDto"] | null;
      bookings: components["schemas"]["BookingBaseDto"][];
      documents: components["schemas"]["PatientDocumentBaseDto"][];
    };
    UserPatientPayloadDto: {
      email?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      phoneNumber?: string | null;
      /** @enum {string} */
      accessLevel: "Godmin" | "GodminStaff" | "Patient" | "Staff" | "Clinical" | "Commercial" | "Financial" | "Associate";
      avatar?: string | null;
      /** @enum {string} */
      status: "PendingInvite" | "EmailSent" | "Completed";
      /** Format: date-time */
      deletedAt?: string | null;
      /** @description <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">Timezone ID</a> */
      timezone: string;
      patient: components["schemas"]["PatientPayloadDto"] | null;
      /** Format: uuid */
      id: string;
      isActive: boolean;
      /** Format: date-time */
      createdAt: string;
    };
    ResultPaginationDetailDto: {
      total: number;
      lastPage: number;
      currentPage: number;
      perPage: number;
      from: number;
      to: number;
    };
    UserPatientListResultDto: {
      pagination: components["schemas"]["ResultPaginationDetailDto"];
      data: components["schemas"]["UserPayloadDto"][];
    };
    UserPatientUpdateDto: {
      email?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      phoneNumber?: string | null;
      avatar?: string | null;
      /** @description <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">Timezone ID</a> */
      timezone?: string;
      patient?: components["schemas"]["PatientUpdateDto"];
    };
    PatientDocumentCreateDto: {
      /** @enum {string} */
      type: "Document" | "Photo" | "Link";
      title: string;
      file: string;
    };
    PatientDocumentListResultDto: {
      pagination: components["schemas"]["ResultPaginationDetailDto"];
      data: components["schemas"]["PatientDocumentBaseDto"][];
    };
    StaffCreateDto: {
      companyName?: string | null;
      companyPosition?: string | null;
      roleId: string;
    };
    UserStaffCreateDto: {
      avatar?: string | null;
      /** @enum {string} */
      accessLevel: "Staff" | "Clinical" | "Financial" | "Commercial" | "Associate";
      email: string;
      firstName: string;
      lastName: string;
      phoneNumber: string;
      staff: components["schemas"]["StaffCreateDto"];
    };
    StaffRoleBaseDto: {
      /** Format: date-time */
      deletedAt?: string | null;
      /** @enum {string} */
      type: "Surgeon" | "Anaesthetist" | "Assistant" | "Custom";
      id: string;
      name: string;
    };
    StaffPayloadDto: {
      companyName?: string | null;
      companyPosition?: string | null;
      /** Format: uuid */
      userId: string;
      roleId: string;
      role: components["schemas"]["StaffRoleBaseDto"];
    };
    UserStaffPayloadDto: {
      email?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      phoneNumber?: string | null;
      /** @enum {string} */
      accessLevel: "Godmin" | "GodminStaff" | "Patient" | "Staff" | "Clinical" | "Commercial" | "Financial" | "Associate";
      avatar?: string | null;
      /** @enum {string} */
      status: "PendingInvite" | "EmailSent" | "Completed";
      /** Format: date-time */
      deletedAt?: string | null;
      /** @description <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">Timezone ID</a> */
      timezone: string;
      staff: components["schemas"]["StaffPayloadDto"] | null;
      /** Format: uuid */
      id: string;
      isActive: boolean;
      /** Format: date-time */
      createdAt: string;
    };
    UserStaffListResultDto: {
      pagination: components["schemas"]["ResultPaginationDetailDto"];
      data: components["schemas"]["UserStaffPayloadDto"][];
    };
    StaffUpdateDto: {
      companyName?: string | null;
      companyPosition?: string | null;
      roleId?: string;
    };
    UserStaffUpdateDto: {
      email?: string | null;
      firstName?: string | null;
      lastName?: string | null;
      phoneNumber?: string | null;
      avatar?: string | null;
      /** @description <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">Timezone ID</a> */
      timezone?: string;
      staff?: components["schemas"]["StaffUpdateDto"];
      /** @enum {string} */
      accessLevel?: "Staff" | "Clinical" | "Financial" | "Commercial" | "Associate";
    };
    BookingStaffCreateDto: {
      /** Format: uuid */
      staffId: string;
      roleId: string;
    };
    BookingFlagCreateDto: {
      flagId: string;
    };
    ItemCreateDto: {
      name: string;
    };
    BookingCreateDto: {
      position?: string | null;
      table?: string | null;
      notes?: string | null;
      fastingDetails?: string | null;
      /** Format: date-time */
      startDate?: string | null;
      /** Format: date-time */
      endDate?: string | null;
      /** Format: date-time */
      admissionTime?: string | null;
      /** Format: uuid */
      surgeonId?: string | null;
      staffs?: components["schemas"]["BookingStaffCreateDto"][];
      flags?: components["schemas"]["BookingFlagCreateDto"][];
      equipments?: components["schemas"]["ItemCreateDto"][];
      implants?: components["schemas"]["ItemCreateDto"][];
      mbsItems?: components["schemas"]["ItemCreateDto"][];
      templateId: string;
      surgeryTitle: string;
      surgeryCode: string;
      surgeryName: string;
      /** Format: uuid */
      patientId: string;
    };
    SurgeryItemBaseDto: {
      /** @enum {string} */
      type: "Implant" | "Equipment" | "MBSItem";
      surgeryId?: string | null;
      bookingId?: string | null;
      name: string;
      id: string;
    };
    StaffPayloadBookingDto: {
      companyName?: string | null;
      companyPosition?: string | null;
      /** Format: uuid */
      userId: string;
      roleId: string;
      role: components["schemas"]["StaffRoleBaseDto"];
      user: components["schemas"]["UserPayloadDto"];
    };
    PatientPayloadBookingDto: {
      /** @enum {string} */
      gender: "Male" | "Female";
      addressId?: string | null;
      age?: number | null;
      emergencyName?: string | null;
      emergencyPhone?: string | null;
      relationship?: string | null;
      /** Format: uuid */
      userId: string;
      /** Format: date-time */
      dob: string;
      user: components["schemas"]["UserPayloadDto"];
    };
    BookingStaffPayloadDto: {
      role: components["schemas"]["StaffRoleBaseDto"];
      staff: components["schemas"]["StaffPayloadBookingDto"];
      bookingId: string;
      /** Format: uuid */
      staffId: string;
      roleId: string;
    };
    ItemBaseDto: {
      name: string;
      id: string;
    };
    FlagPayloadDto: {
      item: components["schemas"]["ItemBaseDto"];
      id: string;
    };
    BookingFlagPayloadDto: {
      flag: components["schemas"]["FlagPayloadDto"];
      bookingId: string;
      flagId: string;
    };
    BookingPayloadDto: {
      position?: string | null;
      table?: string | null;
      notes?: string | null;
      fastingDetails?: string | null;
      /** Format: date-time */
      startDate?: string | null;
      /** Format: date-time */
      endDate?: string | null;
      /** Format: date-time */
      admissionTime?: string | null;
      /** @enum {string} */
      status: "Contemplating" | "Tentative" | "Confirmed" | "Finalised" | "Cancelled" | "InOR" | "Closing" | "Discharge";
      /** Format: uuid */
      surgeonId?: string | null;
      templateId?: string | null;
      implants?: components["schemas"]["SurgeryItemBaseDto"][];
      mbsItems?: components["schemas"]["SurgeryItemBaseDto"][];
      equipments?: components["schemas"]["SurgeryItemBaseDto"][];
      surgeon?: components["schemas"]["StaffPayloadBookingDto"] | null;
      patient: components["schemas"]["PatientPayloadBookingDto"];
      staffs: components["schemas"]["BookingStaffPayloadDto"][];
      flags: components["schemas"]["BookingFlagPayloadDto"][];
      id: string;
      surgeryTitle: string;
      surgeryCode: string;
      surgeryName: string;
      /** Format: uuid */
      patientId: string;
      /** Format: date-time */
      createdAt: string;
    };
    BookingListPayloadDto: {
      position?: string | null;
      table?: string | null;
      notes?: string | null;
      fastingDetails?: string | null;
      /** Format: date-time */
      startDate?: string | null;
      /** Format: date-time */
      endDate?: string | null;
      /** Format: date-time */
      admissionTime?: string | null;
      /** @enum {string} */
      status: "Contemplating" | "Tentative" | "Confirmed" | "Finalised" | "Cancelled" | "InOR" | "Closing" | "Discharge";
      /** Format: uuid */
      surgeonId?: string | null;
      templateId?: string | null;
      surgeon?: components["schemas"]["StaffPayloadBookingDto"] | null;
      patient: components["schemas"]["PatientPayloadBookingDto"];
      staffs: components["schemas"]["BookingStaffPayloadDto"][];
      id: string;
      surgeryTitle: string;
      surgeryCode: string;
      surgeryName: string;
      /** Format: uuid */
      patientId: string;
      /** Format: date-time */
      createdAt: string;
    };
    BookingListResultDto: {
      pagination: components["schemas"]["ResultPaginationDetailDto"];
      data: components["schemas"]["BookingListPayloadDto"][];
    };
    BookingUpdateDto: {
      position?: string | null;
      table?: string | null;
      notes?: string | null;
      fastingDetails?: string | null;
      /** Format: date-time */
      startDate?: string | null;
      /** Format: date-time */
      endDate?: string | null;
      /** Format: date-time */
      admissionTime?: string | null;
      /** Format: uuid */
      surgeonId?: string | null;
      staffs?: components["schemas"]["BookingStaffCreateDto"][];
      flags?: components["schemas"]["BookingFlagCreateDto"][];
      equipments?: components["schemas"]["ItemCreateDto"][];
      implants?: components["schemas"]["ItemCreateDto"][];
      mbsItems?: components["schemas"]["ItemCreateDto"][];
      surgeryTitle?: string;
      surgeryCode?: string;
      surgeryName?: string;
      /** Format: uuid */
      patientId?: string;
      templateId?: string;
    };
    BookingUpdateStatusDto: {
      /** @enum {string} */
      status: "Contemplating" | "Tentative" | "Confirmed" | "Finalised" | "Cancelled" | "InOR" | "Closing" | "Discharge";
    };
    CalendarBookingListResultDto: {
      date: string;
      bookings: components["schemas"]["BookingListPayloadDto"][];
    };
    TemplateCreateDto: {
      title: string;
    };
    TemplateBaseDto: {
      id: string;
      title: string;
      /** Format: date-time */
      createdAt: string;
    };
    TemplateListResultDto: {
      pagination: components["schemas"]["ResultPaginationDetailDto"];
      data: components["schemas"]["TemplateBaseDto"][];
    };
    TemplateUpdateDto: {
      title?: string;
    };
    SurgeryCreateDto: {
      code: string;
    };
    SurgeryBaseDto: {
      id: string;
      code: string;
      templateId: string;
      /** Format: date-time */
      createdAt: string;
    };
    SurgeryListResultDto: {
      pagination: components["schemas"]["ResultPaginationDetailDto"];
      data: components["schemas"]["SurgeryBaseDto"][];
    };
    SurgeryDetailBaseDto: {
      name?: string | null;
      notes?: string | null;
      table?: string | null;
      position?: string | null;
      durationInMinutes?: number | null;
      id: string;
    };
    SurgeryStaffPayloadDto: {
      role: components["schemas"]["StaffRoleBaseDto"];
      count: number;
      roleId: string;
      surgeryId: string;
    };
    SurgeryPayloadDto: {
      detail?: components["schemas"]["SurgeryDetailBaseDto"] | null;
      implants?: components["schemas"]["SurgeryItemBaseDto"][];
      mbsItems?: components["schemas"]["SurgeryItemBaseDto"][];
      equipments?: components["schemas"]["SurgeryItemBaseDto"][];
      team?: components["schemas"]["SurgeryStaffPayloadDto"][];
      id: string;
      code: string;
      templateId: string;
      /** Format: date-time */
      createdAt: string;
    };
    SurgeryUpdateDto: {
      code?: string;
    };
    SurgeryDetailCreateDto: {
      name?: string | null;
      notes?: string | null;
      table?: string | null;
      position?: string | null;
      durationInMinutes?: number | null;
    };
    SurgeryItemCreateDto: {
      items: components["schemas"]["ItemCreateDto"][];
    };
    SurgeryItemPayloadDto: {
      items?: components["schemas"]["SurgeryItemBaseDto"][];
    };
    SurgeryStaffCreateDto: {
      roleId: string;
      count: number;
    };
    SurgeryTeamCreateDto: {
      team: components["schemas"]["SurgeryStaffCreateDto"][];
    };
    SurgeryTeamPayloadDto: {
      team?: components["schemas"]["SurgeryStaffPayloadDto"][];
    };
    CategoryCreateDto: {
      /** @enum {string} */
      type: "Implant" | "Equipment";
      name: string;
    };
    CategoryBaseDto: {
      /** @enum {string} */
      type: "Implant" | "Equipment";
      name: string;
      id: string;
    };
    CategoryListResultDto: {
      pagination: components["schemas"]["ResultPaginationDetailDto"];
      data: components["schemas"]["CategoryBaseDto"][];
    };
    CategoryUpdateDto: {
      name?: string;
    };
    StaffRoleListResultDto: {
      pagination: components["schemas"]["ResultPaginationDetailDto"];
      data: components["schemas"]["StaffRoleBaseDto"][];
    };
    FlagListResultDto: {
      pagination: components["schemas"]["ResultPaginationDetailDto"];
      data: components["schemas"]["FlagPayloadDto"][];
    };
    ImplantPayloadDto: {
      item: components["schemas"]["ItemBaseDto"];
      id: string;
      categoryId: string;
    };
    CategoryImplantPayloadDto: {
      /** @enum {string} */
      type: "Implant" | "Equipment";
      name: string;
      id: string;
      implants: components["schemas"]["ImplantPayloadDto"][];
    };
    CategoryImplantListResultDto: {
      pagination: components["schemas"]["ResultPaginationDetailDto"];
      data: components["schemas"]["CategoryImplantPayloadDto"][];
    };
    EquipmentPayloadDto: {
      item: components["schemas"]["ItemBaseDto"];
      id: string;
      categoryId: string;
    };
    CategoryEquipmentPayloadDto: {
      /** @enum {string} */
      type: "Implant" | "Equipment";
      name: string;
      id: string;
      equipments: components["schemas"]["EquipmentPayloadDto"][];
    };
    CategoryEquipmentListResultDto: {
      pagination: components["schemas"]["ResultPaginationDetailDto"];
      data: components["schemas"]["CategoryEquipmentPayloadDto"][];
    };
    StaffRoleCreateDto: {
      name: string;
    };
    StaffRoleUpdateDto: {
      name?: string;
    };
    FlagCreateDto: {
      item: components["schemas"]["ItemCreateDto"];
    };
    FlagUpdateDto: {
      item?: components["schemas"]["ItemCreateDto"];
    };
    ImplantCreateDto: {
      item: components["schemas"]["ItemCreateDto"];
    };
    ImplantListResultDto: {
      pagination: components["schemas"]["ResultPaginationDetailDto"];
      data: components["schemas"]["ImplantPayloadDto"][];
    };
    ImplantUpdateDto: {
      item?: components["schemas"]["ItemCreateDto"];
    };
    EquipmentCreateDto: {
      item: components["schemas"]["ItemCreateDto"];
    };
    EquipmentListResultDto: {
      pagination: components["schemas"]["ResultPaginationDetailDto"];
      data: components["schemas"]["EquipmentPayloadDto"][];
    };
    EquipmentUpdateDto: {
      item?: components["schemas"]["ItemCreateDto"];
    };
    EventCreateDto: {
      /** @enum {string} */
      type: "Opening" | "Shift";
      /** @enum {string} */
      recurrence: "OneTime" | "Daily" | "Weekly" | "Fortnightly";
      staffId: string;
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
    };
    EventPayloadDto: {
      /** Format: uuid */
      staffId?: string | null;
      /** @enum {string} */
      type: "Opening" | "Shift";
      /** @enum {string} */
      recurrence: "OneTime" | "Daily" | "Weekly" | "Fortnightly";
      staff?: components["schemas"]["StaffPayloadBookingDto"] | null;
      id: string;
      /** Format: date-time */
      startDate: string;
      /** Format: date-time */
      endDate: string;
    };
    EventDatePayloadDto: {
      eventId?: string | null;
      event?: components["schemas"]["EventPayloadDto"] | null;
      id: string;
      /** Format: date-time */
      date: string;
    };
    EventListResultDto: {
      date: string;
      events: components["schemas"]["EventDatePayloadDto"][];
    };
    EventDeleteDto: {
      /** @enum {string} */
      type: "Single" | "Future" | "All";
      /** Format: date-time */
      date: string;
    };
    ResultPaginationDto: {
      pagination: components["schemas"]["ResultPaginationDetailDto"];
    };
    AbstractErrorResponseDto: {
      data: Record<string, never>;
      message?: string;
      httpStatus: number;
      /** Format: date-time */
      timestamp: string;
      /** @enum {string} */
      method: "POST" | "GET" | "PUT" | "PATCH" | "DELETE";
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  AppGetHello: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  HealthCheckCheck: {
    responses: {
      /** @description The Health Check is successful */
      200: {
        content: {
          "application/json": {
            /** @example ok */
            status?: string;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   }
             * }
             */
            info?: {
              [key: string]: {
                status: string;
                [key: string]: unknown;
              };
            } | null;
            /** @example {} */
            error?: {
              [key: string]: {
                status: string;
                [key: string]: unknown;
              };
            } | null;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   }
             * }
             */
            details?: {
              [key: string]: {
                status: string;
                [key: string]: unknown;
              };
            };
          };
        };
      };
      /** @description The Health Check is not successful */
      503: {
        content: {
          "application/json": {
            /** @example error */
            status?: string;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   }
             * }
             */
            info?: {
              [key: string]: {
                status: string;
                [key: string]: unknown;
              };
            } | null;
            /**
             * @example {
             *   "redis": {
             *     "status": "down",
             *     "message": "Could not connect"
             *   }
             * }
             */
            error?: {
              [key: string]: {
                status: string;
                [key: string]: unknown;
              };
            } | null;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   },
             *   "redis": {
             *     "status": "down",
             *     "message": "Could not connect"
             *   }
             * }
             */
            details?: {
              [key: string]: {
                status: string;
                [key: string]: unknown;
              };
            };
          };
        };
      };
    };
  };
  AuthSignIn: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthSignInRequestDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["AuthSignInResultDto"];
        };
      };
    };
  };
  AuthRefreshToken: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["AuthTokenDto"];
        };
      };
    };
  };
  AuthMe: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPayloadDto"];
        };
      };
    };
  };
  AuthResetPasswordStart: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthVerificationStartDto"];
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  AuthResetPasswordCheck: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthVerificationCodeFinishDto"];
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  AuthResetPasswordFinish: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthResetPasswordFinishDto"];
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  UserAdminSendInvite: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  UserUpdateStaff: {
    parameters: {
      path: {
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateStaffProfile"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPayloadDto"];
        };
      };
    };
  };
  UserUpdatePatient: {
    parameters: {
      path: {
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdatePatientProfile"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPayloadDto"];
        };
      };
    };
  };
  UserUpdateEmailStart: {
    parameters: {
      path: {
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateEmailStartDto"];
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  UserUpdateEmailFinish: {
    parameters: {
      path: {
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateEmailFinishDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPayloadDto"];
        };
      };
    };
  };
  UserUpdatePassword: {
    parameters: {
      path: {
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserPasswordUpdateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPayloadDto"];
        };
      };
    };
  };
  UserInvitationGetUser: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPayloadDto"];
        };
      };
    };
  };
  UserInvitationInvitationSignUp: {
    parameters: {
      path: {
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserPasswordCreateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPayloadDto"];
        };
      };
    };
  };
  FileUploadImage: {
    parameters: {
      query: {
        /** @description File name */
        fileName: string;
        /** @description Folder */
        folder: "document" | "avatar";
      };
      path: {
        rootFolder: "images" | "videos" | "other";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FileUploadResponseDto"];
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["FileUploadResponseDto"];
        };
      };
    };
  };
  FileDownloadResize: {
    parameters: {
      query: {
        /** @description File name */
        fileName: string;
        width?: number;
        height?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FileDownloadResponseDto"];
        };
      };
    };
  };
  FileDownload: {
    parameters: {
      query: {
        /** @description File name */
        fileName: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FileDownloadResponseDto"];
        };
      };
    };
  };
  PatientList: {
    parameters: {
      query: {
        page: number;
        perPage: number;
        sortOrder?: "asc" | "desc";
        sortColumn?: "createdAt";
        name?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPatientListResultDto"];
        };
      };
    };
  };
  PatientCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserPatientCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UserPatientPayloadDto"];
        };
      };
    };
  };
  PatientGetById: {
    parameters: {
      path: {
        patientId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPatientPayloadDto"];
        };
      };
    };
  };
  PatientDelete: {
    parameters: {
      path: {
        patientId: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  PatientUpdate: {
    parameters: {
      path: {
        patientId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserPatientUpdateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserPatientPayloadDto"];
        };
      };
    };
  };
  PatientActivate: {
    parameters: {
      path: {
        patientId: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  PatientDeactivate: {
    parameters: {
      path: {
        patientId: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  PatientGetDocuments: {
    parameters: {
      query: {
        type?: "Document" | "Photo" | "Link";
        page: number;
        perPage: number;
      };
      path: {
        patientId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PatientDocumentListResultDto"];
        };
      };
    };
  };
  PatientUploadDocument: {
    parameters: {
      path: {
        patientId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatientDocumentCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PatientDocumentBaseDto"];
        };
      };
    };
  };
  PatientGetDocumentById: {
    parameters: {
      path: {
        patientId: string;
        documentId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PatientDocumentBaseDto"];
        };
      };
    };
  };
  PatientDeleteDocument: {
    parameters: {
      path: {
        patientId: string;
        documentId: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  StaffList: {
    parameters: {
      query: {
        page: number;
        perPage: number;
        sortOrder?: "asc" | "desc";
        sortColumn?: "createdAt";
        name?: string;
        roleId?: string;
        isSurgeon?: boolean;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserStaffListResultDto"];
        };
      };
    };
  };
  StaffCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserStaffCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UserStaffPayloadDto"];
        };
      };
    };
  };
  StaffFindOne: {
    parameters: {
      path: {
        staffId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserStaffPayloadDto"];
        };
      };
    };
  };
  StaffDelete: {
    parameters: {
      path: {
        staffId: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  StaffUpdate: {
    parameters: {
      path: {
        staffId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserStaffUpdateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserStaffPayloadDto"];
        };
      };
    };
  };
  StaffActivate: {
    parameters: {
      path: {
        staffId: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  StaffDeactivate: {
    parameters: {
      path: {
        staffId: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  BookingList: {
    parameters: {
      query: {
        page: number;
        perPage: number;
        sortOrder?: "asc" | "desc";
        sortColumn?: "firstName";
        status?: "Contemplating" | "Tentative" | "Confirmed" | "Finalised" | "Cancelled" | "InOR" | "Closing" | "Discharge";
        surgeonId?: string | null;
        search?: string;
        surgeryCode?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BookingListResultDto"];
        };
      };
    };
  };
  BookingCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BookingCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["BookingPayloadDto"];
        };
      };
    };
  };
  BookingGetById: {
    parameters: {
      path: {
        bookingId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BookingPayloadDto"];
        };
      };
    };
  };
  BookingDelete: {
    parameters: {
      path: {
        bookingId: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  BookingUpdate: {
    parameters: {
      path: {
        bookingId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BookingUpdateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BookingPayloadDto"];
        };
      };
    };
  };
  BookingUpdateStatus: {
    parameters: {
      path: {
        bookingId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BookingUpdateStatusDto"];
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  CalendarGetBookings: {
    parameters: {
      query: {
        status?: "Contemplating" | "Tentative" | "Confirmed" | "Finalised" | "Cancelled" | "InOR" | "Closing" | "Discharge";
        surgeonId?: string | null;
        /** @description Start of the calendar range in UTC. Must represent 12:00 AM of the selected start date in the user’s local timezone, converted to UTC. For example, for a start date of 11 August in Brisbane/Australia (UTC+10) timezone, the value should be `2024-08-10T14:00:00Z`. */
        startDate: string;
        /** @description End of the calendar range in UTC. Must represent 11:59 PM of the selected end date in the user’s local timezone, converted to UTC. For example, for an end date of 17 August in Brisbane/Australia (UTC+10) timezone, the value should be `2024-08-17T13:59:00Z`. */
        endDate: string;
        search?: string;
        surgeryCode?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CalendarBookingListResultDto"][];
        };
      };
    };
  };
  TemplateList: {
    parameters: {
      query: {
        page: number;
        perPage: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TemplateListResultDto"];
        };
      };
    };
  };
  TemplateCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TemplateCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["TemplateBaseDto"];
        };
      };
    };
  };
  TemplateDelete: {
    parameters: {
      path: {
        templateId: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  TemplateUpdate: {
    parameters: {
      path: {
        templateId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TemplateUpdateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TemplateBaseDto"];
        };
      };
    };
  };
  SurgeryList: {
    parameters: {
      query: {
        page: number;
        perPage: number;
      };
      path: {
        templateId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SurgeryListResultDto"];
        };
      };
    };
  };
  SurgeryCreate: {
    parameters: {
      path: {
        templateId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SurgeryCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SurgeryBaseDto"];
        };
      };
    };
  };
  SurgeryFindOne: {
    parameters: {
      path: {
        templateId: string;
        surgeryId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SurgeryPayloadDto"];
        };
      };
    };
  };
  SurgeryDelete: {
    parameters: {
      path: {
        templateId: string;
        surgeryId: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  SurgeryUpdate: {
    parameters: {
      path: {
        templateId: string;
        surgeryId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SurgeryUpdateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SurgeryBaseDto"];
        };
      };
    };
  };
  SurgeryDetailGet: {
    parameters: {
      path: {
        templateId: string;
        surgeryId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SurgeryDetailBaseDto"];
        };
      };
    };
  };
  SurgeryDetailUpsert: {
    parameters: {
      path: {
        templateId: string;
        surgeryId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SurgeryDetailCreateDto"];
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  SurgeryItemGetEquipments: {
    parameters: {
      path: {
        templateId: string;
        surgeryId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SurgeryItemPayloadDto"];
        };
      };
    };
  };
  SurgeryItemUpdateEquipments: {
    parameters: {
      path: {
        templateId: string;
        surgeryId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SurgeryItemCreateDto"];
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  SurgeryItemGetImplants: {
    parameters: {
      path: {
        templateId: string;
        surgeryId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SurgeryItemPayloadDto"];
        };
      };
    };
  };
  SurgeryItemUpdateImplants: {
    parameters: {
      path: {
        templateId: string;
        surgeryId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SurgeryItemCreateDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  SurgeryItemGetMbs: {
    parameters: {
      path: {
        templateId: string;
        surgeryId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SurgeryItemPayloadDto"];
        };
      };
    };
  };
  SurgeryItemUpdateMbs: {
    parameters: {
      path: {
        templateId: string;
        surgeryId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SurgeryItemCreateDto"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  SurgeryTeamGet: {
    parameters: {
      path: {
        templateId: string;
        surgeryId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SurgeryTeamPayloadDto"];
        };
      };
    };
  };
  SurgeryTeamCreate: {
    parameters: {
      path: {
        templateId: string;
        surgeryId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SurgeryTeamCreateDto"];
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  CategoryList: {
    parameters: {
      query: {
        page: number;
        perPage: number;
        type: "Implant" | "Equipment";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CategoryListResultDto"];
        };
      };
    };
  };
  CategoryCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoryCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CategoryBaseDto"];
        };
      };
    };
  };
  CategoryDelete: {
    parameters: {
      path: {
        categoryId: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  CategoryUpdate: {
    parameters: {
      path: {
        categoryId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoryUpdateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CategoryBaseDto"];
        };
      };
    };
  };
  SettingsGetStaffRoles: {
    parameters: {
      query: {
        page: number;
        perPage: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StaffRoleListResultDto"];
        };
      };
    };
  };
  SettingsGetFlags: {
    parameters: {
      query: {
        page: number;
        perPage: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FlagListResultDto"];
        };
      };
    };
  };
  SettingsGetImplants: {
    parameters: {
      query: {
        page: number;
        perPage: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CategoryImplantListResultDto"];
        };
      };
    };
  };
  SettingsGetEquipments: {
    parameters: {
      query: {
        page: number;
        perPage: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CategoryEquipmentListResultDto"];
        };
      };
    };
  };
  StaffRoleCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StaffRoleCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["StaffRoleBaseDto"];
        };
      };
    };
  };
  StaffRoleDelete: {
    parameters: {
      path: {
        staffRoleId: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  StaffRoleUpdate: {
    parameters: {
      path: {
        staffRoleId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StaffRoleUpdateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StaffRoleBaseDto"];
        };
      };
    };
  };
  FlagCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FlagCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["FlagPayloadDto"];
        };
      };
    };
  };
  FlagDelete: {
    parameters: {
      path: {
        flagId: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  FlagUpdate: {
    parameters: {
      path: {
        flagId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FlagUpdateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FlagPayloadDto"];
        };
      };
    };
  };
  ImplantList: {
    parameters: {
      query: {
        page: number;
        perPage: number;
      };
      path: {
        categoryId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ImplantListResultDto"];
        };
      };
    };
  };
  ImplantCreate: {
    parameters: {
      path: {
        categoryId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ImplantCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ImplantPayloadDto"];
        };
      };
    };
  };
  ImplantDelete: {
    parameters: {
      path: {
        categoryId: string;
        implantId: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  ImplantUpdate: {
    parameters: {
      path: {
        categoryId: string;
        implantId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ImplantUpdateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ImplantPayloadDto"];
        };
      };
    };
  };
  EquipmentList: {
    parameters: {
      query: {
        page: number;
        perPage: number;
      };
      path: {
        categoryId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EquipmentListResultDto"];
        };
      };
    };
  };
  EquipmentCreate: {
    parameters: {
      path: {
        categoryId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EquipmentCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["EquipmentPayloadDto"];
        };
      };
    };
  };
  EquipmentDelete: {
    parameters: {
      path: {
        categoryId: string;
        equipmentId: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  EquipmentUpdate: {
    parameters: {
      path: {
        categoryId: string;
        equipmentId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EquipmentUpdateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EquipmentPayloadDto"];
        };
      };
    };
  };
  EventList: {
    parameters: {
      query: {
        startDate: string;
        endDate: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EventListResultDto"][];
        };
      };
    };
  };
  EventCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EventCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["EventPayloadDto"];
        };
      };
    };
  };
  EventGetById: {
    parameters: {
      path: {
        eventId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EventPayloadDto"];
        };
      };
    };
  };
  EventUpdate: {
    parameters: {
      path: {
        eventId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EventCreateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EventPayloadDto"];
        };
      };
    };
  };
  EventDelete: {
    parameters: {
      path: {
        eventId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EventDeleteDto"];
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
}
